---
title: "Tutorials"
author: "Dionne Argyropoulos"
date: 2025-07-30
format: 
  html: 
    theme: cosmo  # or flatly, etc.
    page-layout: full
    self-contained: true
    toc: true
    execute:
      warning: false
      message: false
---

## Load the Package and Data

```{r load package and data}
devtools::install_github("dionnecargy/pvsero") # To download the package
library(pvsero) # To load the package 
library(tidyverse) # for data wrangling and visualisation
library(knitr)    # for RMarkdown visualisation and PDF generation
library(targets) # for data visualisation of pipeline (below)
```

## Data Analysis: `runPvSeroPipeline()` 

Run this global function `runPvSeroPipeline()` embedded within the `{pvsero}` R package! This function contains all of the steps in order of how to perform the *Plasmodium vivax* serology test and treat protocol as found in our [application](https://dionnecargy.shinyapps.io/PvSeroApp/)! 

### Using Tutorial Dataset: Load the Data

We will be using the build-in files in the R package for this tutorial, as shown below. 

```{r load tutorial data}
your_raw_data <- c(
  system.file("extdata", "example_MAGPIX_plate1.csv", package = "pvsero"),
  system.file("extdata", "example_MAGPIX_plate2.csv", package = "pvsero"), 
  system.file("extdata", "example_MAGPIX_plate3.csv", package = "pvsero")
)
your_plate_layout <- system.file("extdata", "example_platelayout_1.xlsx", package = "pvsero")
```

To run your OWN data, follow the code below and uncomment (i.e., remove the hashtags): 

```{r}
# your_raw_data <- c(
#   "PATH/TO/YOUR/FILE/plate1.csv",
#   "PATH/TO/YOUR/FILE/plate2.csv",
#   "PATH/TO/YOUR/FILE/plate3.csv"
# )
# your_plate_layout <- "PATH/TO/YOUR/FILE/plate_layout.xlsx"
```

### Run Classification: Yes

```{r runPvSeroPipeline with classification}
final_analysis <- runPvSeroPipeline(
  raw_data = your_raw_data, 
  plate_layout = your_plate_layout, 
  platform = "magpix", 
  location = "ETH", 
  experiment_name = "experiment1", 
  classify = "Yes", 
  algorithm_type = "antibody_model", 
  sens_spec = "maximised"
)
```
::: {.tabset}

#### Classification 

This is a table containing the classification results (seropositive or seronegative) for each `SampleID`. In this case, the classification results are stored in the `pred_class_max` column as we chose the `sens_spec = "maximised"`. If you change it to another type of threshold, then the suffix of that column will change accordingly. 

You will also see the relative antibody unit (RAU) values (columns with antigen names), whether the sample passed QC check (`QC_total`) and the `plate` that they were run on. 

```{r classification tab 1}
final_analysis[[1]] %>%
  head() %>% 
  kable()
```

#### Standard Curve Plot

The standard curve plots are generated from the antibody data from the standards you indicated in your plate layout (e.g. S1-S10) and Median Fluorescent Intensity (MFI) units are displayed in log10-scale. In the case of the PvSeroTaT multi-antigen panel, the antigens will be displayed and in general your standard curves should look relatively linear (only when the y-axis is on logarithmic scale). 

```{r std curve plot tab 1}
final_analysis[[2]]
```

#### Bead Counts QC Plot

A summary of the bead counts for each plate well are displayed, with blue indicating there are sufficient beads (≥15) or red when there are not enough. If any of the wells are red, they should be double-checked manually and re-run on a new plate if required.

The function will inform you whether there are "No repeats necessary" or provide a list of samples to be re-run. In the example data, the beads in plate 2 wells A1 and A2 will need to be repeated

```{r bead counts plot tab 1}
final_analysis[[3]] # Plot
final_analysis[[4]] # Samples to repeat 
```

#### Blanks QC Plot

The Median Fluorescent Intensity (MFI) units for each antigen is displayed for your blank samples. In general, each blank sample should have ≤50 MFI for each antigen, if they are higher they should be cross-checked manually.

In the example data, blank samples recorded higher MFI values for LF005 on plate 1 and should be checked to confirm this is expected from the assay.

```{r blanks qc plot tab 1}
final_analysis[[5]]
```

#### Model Output Plot

The automated data processing in this app allows you to convert your Median Fluorescent Intensity (MFI) data into Relative Antibody Units (RAU) by fitting a 5-parameter logistic function to the standard curve on a per-antigen level. The results from this log-log conversion should look relatively linear for each antigen.

```{r model output plot tab 1}
final_analysis[[6]]
```
::: 

### Run Classification: No

```{r runPvSeroPipeline without classification}
no_classification_final_analysis <- runPvSeroPipeline(
  raw_data = your_raw_data, 
  plate_layout = your_plate_layout, 
  platform = "magpix", 
  location = "ETH", 
  experiment_name = "experiment1", 
  classify = "No", ########################## key if you do NOT want any classification performed i.e., you do not have PvSeroTaT antigens 
  algorithm_type = "antibody_model", 
  sens_spec = "maximised"
)
```
::: {.tabset}

#### MFI and RAU Data 

```{r mfi and rau tab 2}
no_classification_final_analysis[[1]]  %>%
  head() %>% 
  kable()
```

#### QC Plots

Repeat the same steps as above to find the QC plots! 

```{r std curve plot tab 2}
#### Standard Curve Plot
no_classification_final_analysis[[2]]

#### Bead Counts QC Plot
no_classification_final_analysis[[3]] # Plot
no_classification_final_analysis[[4]] # Samples to repeat 

#### Blanks QC Plot
no_classification_final_analysis[[5]]

#### Model Output Plot
no_classification_final_analysis[[6]]
```
:::

### Create a PDF Report

```{r create pdf output}
renderQCReport(
  your_raw_data, 
  your_plate_layout, 
  "magpix", 
  location = "ETH"
)
```

## Data Analysis: Pk/Pv/Pf

### 5-Point Standard Curve 

#### Step 1: Load your data!

Firstly, we will be using our example data that's in-built in the package. Here replace the `system.file()` argument with the file path for your package. 

```{r}
your_raw_data_5std <- c(
  system.file("extdata", "example_MAGPIX_pk_5std_plate1.csv", package = "pvsero"),
  system.file("extdata", "example_MAGPIX_pk_5std_plate2.csv", package = "pvsero")
)
your_plate_layout_5std <- system.file("extdata", "example_platelayout_pk_5std.xlsx", package = "pvsero")
```

#### Step 2: Read your data and process MFI to RAU 

Caitlin and Dionne have worked on a function to (a) process raw Serological data and (b) convert MFI to RAU. The `runPlasmoSero5point()` function will output three data frames: (i) Results from MAGPIX (MFI), (ii), Counts for each sample, (iii) Processed RAU values for each sample. These dataframes can be used for further analysis and can be transformed as you wish. 

```{r}
pk_analysis_1 <- runPlasmoSero5point(
  raw_data = your_raw_data_5std, 
  platform = "magpix", 
  plate_layout = your_plate_layout_5std, 
  date = "2025-07-30" # Optional: This will default to today's date
)
```

#### Standard Curve Plot: One Curve

As requested, this is a plot of ONE standard curve which you will specify. You can modify this plot as you see fit by piping other `ggplot2()` arguments. 

```{r}
plotOneStdCurve(pk_analysis_1, "plate1")
```

#### Standard Curve Plot: Compare Two Curves

This function allows you to plot all of your standard curves. 

```{r}
plotManyStdCurves(pk_analysis_1)
```

### 10-Point Standard Curve 

These steps are very similar to the 5-point standard curve, except here we use the `runPlasmoSero10point()` function. 

#### Step 1: Load your data! 

```{r}
your_raw_data_10std <- c(
  system.file("extdata", "example_MAGPIX_pk_10std_plate1.csv", package = "pvsero"),
  system.file("extdata", "example_MAGPIX_pk_10std_plate2.csv", package = "pvsero")
)
your_plate_layout_10std <- system.file("extdata", "example_platelayout_pk_10std.xlsx", package = "pvsero")
```

#### Step 2: Read your data and process MFI to RAU 

```{r}
pk_analysis_2 <- runPlasmoSero10point(
  raw_data = your_raw_data_10std, 
  platform = "magpix", 
  plate_layout = your_plate_layout_10std, 
  date = "2025-07-30" # Optional: This will default to today's date
)
```

#### Standard Curve Plot: One Curve

```{r}
plotOneStdCurve(pk_analysis_2, "plate1")
```

#### Standard Curve Plot: Compare Two Curves

```{r}
plotManyStdCurves(pk_analysis_2)
```

## Visualisation of the `{pvsero}` R Package

We have used the `{targets}` R package to generate a pipeline! This allows us to:

- Automatically detect the dependencies of each step 
- One-command execution
- Automatic caching 
- Automatic detection of changes in data and/or code

For more information on `{targets}` see this [tutorial](https://books.ropensci.org/targets/). 

```{r targets}
library(visNetwork)

tar_config_set(store = "../_targets", script = "../_targets.R")
tar_make()  # optional: run pipeline
network <- tar_network()
visNetwork::visNetwork(nodes = network$nodes, edges = network$edges)
```
