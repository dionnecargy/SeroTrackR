---
title: "Tutorials"
author: "Dionne Argyropoulos"
format: 
  html: 
    theme: cosmo  # or flatly, etc.
    page-layout: full
    self-contained: true
---

## Load the Package and Data

```{r load package and data}
library(pvsero)
library(tidyverse) # for data wrangling and visualisation
library(knitr)    # for RMarkdown visualisation and PDF generation
library(targets) # for data visualisation of pipeline (below)

# your_raw_data <- c(
#   "PATH/TO/YOUR/FILE/plate1.csv",
#   "PATH/TO/YOUR/FILE/plate2.csv",
#   "PATH/TO/YOUR/FILE/plate3.csv"
# )
# your_plate_layout <- "PATH/TO/YOUR/FILE/plate_layout.xlsx"
```

## Using Tutorial Dataset: Load the Data

```{r load tutorial data}
your_raw_data <- c(
  system.file("extdata", "example_MAGPIX_plate1.csv", package = "pvsero"),
  system.file("extdata", "example_MAGPIX_plate2.csv", package = "pvsero"), 
  system.file("extdata", "example_MAGPIX_plate3.csv", package = "pvsero")
)
your_plate_layout <- system.file("extdata", "example_platelayout_1.xlsx", package = "pvsero")
```

## Data Analysis: `runPvSeroPipeline()` 

Run this global function `runPvSeroPipeline()` embedded within the `{pvsero}` R package! This function contains all of the steps in order of how to perform the *Plasmodium vivax* serology test and treat protocol as found in our [application](https://dionnecargy.shinyapps.io/PvSeroApp/)! 

### Run Classification: Yes {.tabset}

```{r runPvSeroPipeline with classification}
final_analysis <- runPvSeroPipeline(
  raw_data = your_raw_data, 
  plate_layout = your_plate_layout, 
  platform = "magpix", 
  location = "ETH", 
  experiment_name = "experiment1", 
  classify = "Yes", 
  algorithm_type = "antibody_model", 
  sens_spec = "maximised"
)

final_analysis
```

#### Classification 

```{r classification tab 1}
final_analysis[[1]]
```

#### Standard Curve Plot

```{r std curve plot tab 1}
final_analysis[[2]]
```

#### Bead Counts QC Plot

```{r bead counts plot tab 1}
final_analysis[[3]] # Plot
final_analysis[[4]] # Samples to repeat 
```

#### Blanks QC Plot

```{r blanks qc plot tab 1}
final_analysis[[5]]
```

#### Model Output Plot

```{r model output plot tab 1}
final_analysis[[6]]
```

### Run Classification: No

```{r runPvSeroPipeline without classification}
no_classification_final_analysis <- runPvSeroPipeline(
  raw_data = your_raw_data, 
  plate_layout = your_plate_layout, 
  platform = "magpix", 
  location = "ETH", 
  experiment_name = "experiment1", 
  classify = "No", ########################## key if you do NOT want any classification performed i.e., you do not have PvSeroTaT antigens 
  algorithm_type = "antibody_model", 
  sens_spec = "maximised"
)
```
#### MFI and RAU Data 

```{r mfi and rau tab 2}
no_classification_final_analysis[[1]]
```

#### Standard Curve Plot

```{r std curve plot tab 2}
no_classification_final_analysis[[2]]
```

#### Bead Counts QC Plot

```{r bead counts plot tab 2}
no_classification_final_analysis[[3]] # Plot
no_classification_final_analysis[[4]] # Samples to repeat 
```

#### Blanks QC Plot

```{r blanks qc plot tab 2}
no_classification_final_analysis[[5]]
```

#### Model Output Plot

```{r model output plot tab 2}
no_classification_final_analysis[[6]]
```

## Create a PDF Report

```{r create pdf output}
renderQCReport(
  your_raw_data, 
  your_plate_layout, 
  "magpix", 
  location = "ETH"
)
```

## Data Analysis: Pk/Pv/Pf

### 5-Point Standard Curve 

#### Step 1: Load your data!

Firstly, we will be using our example data that's in-built in the package. Here replace the `system.file()` argument with the file path for your package. 

```{r}
your_raw_data_5std <- c(
  system.file("extdata", "example_MAGPIX_pk_5std_plate1.csv", package = "pvsero"),
  system.file("extdata", "example_MAGPIX_pk_5std_plate2.csv", package = "pvsero")
)
your_plate_layout_5std <- system.file("extdata", "example_platelayout_pk_5std.xlsx", package = "pvsero")
```

#### Step 2: Read your data and process MFI to RAU 

Caitlin and Dionne have worked on a function to (a) process raw Serological data and (b) convert MFI to RAU. The `runPlasmoSero5point()` function will output three data frames: (i) Results from MAGPIX (MFI), (ii), Counts for each sample, (iii) Processed RAU values for each sample. These dataframes can be used for further analysis and can be transformed as you wish. 

```{r}
pk_analysis_1 <- runPlasmoSero5point(
  raw_data = your_raw_data_5std, 
  platform = "magpix", 
  plate_layout = your_plate_layout_5std, 
  date = "2025-07-30" # Optional: This will default to today's date
)
```

#### Standard Curve Plot: One Curve

```{r}
plotOneStdCurve(pk_analysis_1, "plate1")
```

#### Standard Curve Plot: Compare Two Curves

```{r}
plotManyStdCurves(pk_analysis_1)
```

### 10-Point Standard Curve 

#### Step 1: Load your data! 

```{r}
your_raw_data_10std <- c(
  system.file("extdata", "example_MAGPIX_pk_10std_plate1.csv", package = "pvsero"),
  system.file("extdata", "example_MAGPIX_pk_10std_plate2.csv", package = "pvsero")
)
your_plate_layout_10std <- system.file("extdata", "example_platelayout_pk_10std.xlsx", package = "pvsero")
```

#### Step 2: Read your data and process MFI to RAU 

```{r}
pk_analysis_2 <- runPlasmoSero10point(
  raw_data = your_raw_data_10std, 
  platform = "magpix", 
  plate_layout = your_plate_layout_10std, 
  date = "2025-07-30" # Optional: This will default to today's date
)
```

#### Standard Curve Plot: One Curve

```{r}
plotOneStdCurve(pk_analysis_2, "plate1")
```

#### Standard Curve Plot: Compare Two Curves

```{r}
plotManyStdCurves(pk_analysis_2)
```

## Visualisation of the `{pvsero}` R Package: 

We have used the `{targets}` R package to generate a pipeline! This allows us to:

- Automatically detect the dependencies of each step 
- One-command execution
- Automatic caching 
- Automatic detection of changes in data and/or code

For more information on `{targets}` see this [tutorial](https://books.ropensci.org/targets/). 

```{r targets}
# source(here::here("_targets.R"))
# tar_make() # execute pipeline
# tar_visnetwork() # visualise pipeline
```
